[{"/Users/kevinyip/Documents/info340-code/project-2-coei26/src/index.js":"1","/Users/kevinyip/Documents/info340-code/project-2-coei26/src/App.js":"2","/Users/kevinyip/Documents/info340-code/project-2-coei26/src/components/Footer.js":"3","/Users/kevinyip/Documents/info340-code/project-2-coei26/src/components/NavBar.js":"4","/Users/kevinyip/Documents/info340-code/project-2-coei26/src/Landing.js":"5","/Users/kevinyip/Documents/info340-code/project-2-coei26/src/Advising.js":"6","/Users/kevinyip/Documents/info340-code/project-2-coei26/src/components/Modal.js":"7","/Users/kevinyip/Documents/info340-code/project-2-coei26/src/About.js":"8"},{"size":714,"mtime":1608074087954,"results":"9","hashOfConfig":"10"},{"size":3629,"mtime":1608158934216,"results":"11","hashOfConfig":"10"},{"size":257,"mtime":1607307315479,"results":"12","hashOfConfig":"10"},{"size":966,"mtime":1608153302382,"results":"13","hashOfConfig":"10"},{"size":4057,"mtime":1608158933136,"results":"14","hashOfConfig":"10"},{"size":7813,"mtime":1608149781817,"results":"15","hashOfConfig":"10"},{"size":926,"mtime":1608143523504,"results":"16","hashOfConfig":"10"},{"size":1271,"mtime":1608159115489,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"mfdyqs",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kevinyip/Documents/info340-code/project-2-coei26/src/index.js",[],["36","37"],"/Users/kevinyip/Documents/info340-code/project-2-coei26/src/App.js",["38"],"/Users/kevinyip/Documents/info340-code/project-2-coei26/src/components/Footer.js",[],"/Users/kevinyip/Documents/info340-code/project-2-coei26/src/components/NavBar.js",[],"/Users/kevinyip/Documents/info340-code/project-2-coei26/src/Landing.js",[],"/Users/kevinyip/Documents/info340-code/project-2-coei26/src/Advising.js",["39"],"import React, { useEffect, useState } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, FormGroup, Label}  from 'reactstrap';\nimport './index.css';\nimport firebase from 'firebase';\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport 'bootstrap/dist/css/bootstrap.css'; // or include from a CDN\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport FavModal from './components/Modal.js'\n\n// The main function handling all the advising page logic\nfunction AdvisingPage(props) {\n    // Setting the states\n    const [collegeData, setCollegeData] = useState([]);\n    const [favorites, setFavorites] = useState([]);  // Current favorites\n\n    // Set the favorites through Firebase\n\n    // Fetch the data and assign states\n    useEffect(() => {\n        fetch('data/data.json')\n        .then((res) => {\n            return res.json();\n        })\n        .then((data) => {\n            setCollegeData(data.colleges);\n        })\n        .catch((err) => {\n            console.log(err);\n        })\n    }, [])\n    \n\n    // Assign state change\n    useEffect(() => {\n        if (props.user !== undefined) {\n            const uid = props.user.uid;\n            const userFavs = firebase.database().ref(uid+'/favList');\n            userFavs.on('value', (snapshot) =>{\n                const val = snapshot.val();\n                if (val !== null) {\n                    const keys = Object.keys(val);\n                \n                    const favArr = keys.map((item) => {\n                        return val[item];\n                    })\n\n                    setFavorites(favArr);\n                }\n            })\n        } \n    }, [])\n\n    // Callback function to handle change in current favorites\n    const handleFavorites = (tileName) => {\n\n        const newFavs = favorites.map((item) => {\n            return item;\n        })\n\n        if (newFavs.indexOf(tileName) >= 0) {\n            newFavs.splice(newFavs.indexOf(tileName), 1);\n        } else {\n            newFavs.push(tileName);\n        }\n\n        // Push to firebase\n        const uid = props.user.uid;\n        const userFavs = firebase.database().ref(uid + '/favList');\n        userFavs.set(newFavs);\n    }\n\n    // Callback function for dealing with changes in slider window\n    const handleChange = (numAvail) => {\n        let newCollegeData = collegeData.map((college) => {\n            let deptData = college.departments;\n            let availableNow = 0;\n            college['departments'] = deptData.map((dept) => {\n                if (dept.availability >= numAvail) {\n                    dept.show = true;\n                    availableNow++;\n                } else {\n                    dept.show = false;\n                }\n                return dept;\n            })\n            college['availableNow'] = availableNow;\n            return college;\n        })\n        setCollegeData(newCollegeData);\n    }\n    return (\n        <div>\n            <FavDropDown sliderCallBack={handleChange} favList={favorites} user={props.user}/>\n            <div className=\"container\">\n                <div className=\"standard-page\">\n                    <AllColleges data={collegeData} favList={favorites} handleFav={handleFavorites} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\n// All the colleges and their cards are processed inside this function\n// Props - data -> {CollegeName - Array of {deptName, availibility}}\nfunction AllColleges(props) {\n    // Filter all the colleges based on slider window input\n    let filteredColleges = props.data.filter((college) => {\n        return college.availableNow === undefined || college.availableNow > 0;\n    })\n\n    // Get a list of college content\n    let mapAllColleges = filteredColleges.map((college) => {\n        return <College key={college.college} college={college} favList={props.favList} handleFav={props.handleFav}/>;\n    });\n\n    // Return all the college content\n    return (<div>\n        {mapAllColleges}\n    </div>)\n}\n\n// Renders the content for a single college\nfunction College(props) {\n    let college = props.college;\n    let deptArr = college.departments;\n    return (<section className=\"college\">\n                <div><h1>{college.college}</h1></div>\n                <div className=\"row\">\n                    <AllTiles key={college.college} list={deptArr} favList={props.favList} handleFav={props.handleFav}/>  \n                </div>\n            </section>);\n}\n\n// Renders all the tiles which are information about all the \n// departments within the college\nfunction AllTiles(props) {\n    // Filter the colleges based on slider window input\n    let list = props.list.filter((dept) => {\n        return dept['show'] === undefined || dept.show;\n    });\n\n    // Get a list of tiles and delegate the tile rendering to another\n    // component\n    let mapAllTiles = list.map((deptInfo) => {\n        return <Tile key={deptInfo.name} deptInfo={deptInfo} favList={props.favList} handleFav={props.handleFav}/>;\n    })\n\n    // Render the list\n    return (\n        <div>\n            {mapAllTiles}\n        </div>\n    )\n}\n\n// Render a single department tile\nfunction Tile(props) {\n    let deptInfo = props.deptInfo;\n\n    // Handle the change in favorite list based on user input\n    const handleClick = () => {\n        props.handleFav(deptInfo.name);\n    }\n\n    // Fill-unfill the fav icon based on current list\n    const classProperty = (props.favList.indexOf(deptInfo.name) >= 0) ? \"fas fa-star\" : \"far fa-star\"; \n\n    return (<div className=\"tile\">\n                <h2>{deptInfo.name}</h2>\n                <div className=\"other-side\">\n                    <button type=\"button\">Email</button>\n                    <button type=\"button\" className=\"favoritesButton\" id={deptInfo.name} onClick={handleClick}><i className={classProperty} aria-label=\"Add to Favorites\" aria-hidden=\"true\"></i></button>\n                    <button type=\"button\"><i className=\"fas fa-calendar-alt\" aria-label=\"Schedule Appointment\" aria-hidden=\"true\"></i></button>\n                </div>\n            </div>);\n}\n\n// Render the dropdown button and the favorites list modal content.\nfunction FavDropDown(props) {\n    return(\n        <div className='container'>\n            <div className='standard-page'>\n                <div className=\"favAndDropdown\">\n                    <GetDropdown sliderCallBack={props.sliderCallBack}/>\n                    <FavModal key={props.user.uid} list={props.favList} user={props.user} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\n// Renders the content for dropdown and handles the change in\n// slider window through callback function passed as prop\nfunction GetDropdown(props) {\n    // States for the dropdown\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n\n    const toggle = () => setDropdownOpen(prevState => !prevState);\n\n    const [val, setVal] = useState(\"1\");\n\n    // Callback function for handling the change in input for\n    // slider window\n    const changeData = (event) => {\n        props.sliderCallBack(event.target.value);\n        setVal(event.target.value);\n    }\n    // Render the dropdown content\n    return (\n      <Dropdown direction=\"down\" isOpen={dropdownOpen} toggle={toggle}>\n        <DropdownToggle caret aria-expanded=\"false\">\n            <i className=\"fas fa-bars\"></i>\n        </DropdownToggle>\n        <DropdownMenu>\n            <form className=\"px-4 py-3\">\n                <FormGroup>\n                    <Label for=\"formControlRange\">Advisors Available</Label>\n                    <RangeSlider for=\"formControlRange\" value={val} onChange={changeData} min=\"1\" max=\"20\" step=\"1\" tooltip=\"on\"/>\n                </FormGroup>\n            </form>\n        </DropdownMenu>\n      </Dropdown>\n    );\n}\n\n// Export the main advising page function to main app\nexport default AdvisingPage;","/Users/kevinyip/Documents/info340-code/project-2-coei26/src/components/Modal.js",[],"/Users/kevinyip/Documents/info340-code/project-2-coei26/src/About.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":31,"column":12,"nodeType":"46","messageId":"47","endLine":31,"endColumn":20},{"ruleId":"48","severity":1,"message":"49","line":51,"column":8,"nodeType":"50","endLine":51,"endColumn":10,"suggestions":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'loggedIn' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.user'. Either include it or remove the dependency array.","ArrayExpression",["54"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [props.user]",{"range":"57","text":"58"},[1665,1667],"[props.user]"]