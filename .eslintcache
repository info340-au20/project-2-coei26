[{"C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\index.js":"1","C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\App.js":"2","C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\components\\NavBar.js":"3","C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\components\\Footer.js":"4","C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\Landing.js":"5","C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\Advising.js":"6","C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\Auth.js":"7"},{"size":709,"mtime":1607974579799,"results":"8","hashOfConfig":"9"},{"size":1045,"mtime":1607987862923,"results":"10","hashOfConfig":"9"},{"size":997,"mtime":1607988024398,"results":"11","hashOfConfig":"9"},{"size":270,"mtime":1607918879173,"results":"12","hashOfConfig":"9"},{"size":4136,"mtime":1607918879172,"results":"13","hashOfConfig":"9"},{"size":6111,"mtime":1607987862921,"results":"14","hashOfConfig":"9"},{"size":2619,"mtime":1607981114702,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1p1kmt4",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\index.js",[],"C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\App.js",[],"C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\components\\NavBar.js",[],"C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\components\\Footer.js",[],["32","33"],"C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\Landing.js",[],"C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\Advising.js",["34","35"],"import React, { useEffect, useState } from 'react';\r\nimport { Dropdown, DropdownToggle, DropdownMenu, FormGroup, Label}  from 'reactstrap';\r\nimport './index.css';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport 'bootstrap/dist/css/bootstrap.css'; // or include from a CDN\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\n\r\n\r\n// The main function handling all the advising page logic\r\nfunction AdvisingPage() {\r\n    // Setting the states\r\n    const [collegeData, setCollegeData] = useState([]);\r\n\r\n    // Fetch the data and assign states\r\n    useEffect(() => {\r\n        fetch('data/data.json')\r\n        .then((res) => {\r\n            return res.json();\r\n        })\r\n        .then((data) => {\r\n            setCollegeData(data.colleges);\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n    }, [])\r\n\r\n    // Callback function for dealing with changes in slider window\r\n    const handleChange = (numAvail) => {\r\n        let newCollegeData = collegeData.map((college) => {\r\n            let deptData = college.departments;\r\n            let availableNow = 0;\r\n            college['departments'] = deptData.map((dept) => {\r\n                if (dept.availability >= numAvail) {\r\n                    dept.show = true;\r\n                    availableNow++;\r\n                } else {\r\n                    dept.show = false;\r\n                }\r\n                return dept;\r\n            })\r\n            college['availableNow'] = availableNow;\r\n            return college;\r\n        })\r\n        setCollegeData(newCollegeData);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FavDropDown sliderCallBack={handleChange}/>\r\n            <div className=\"container\">\r\n                <div className=\"standard-page\">\r\n                    <AllColleges data={collegeData}/>\r\n                </div>\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\n// All the colleges and their cards are processed inside this function\r\n// Props - data -> {CollegeName - Array of {deptName, availibility}}\r\nfunction AllColleges(props) {\r\n    // Filter all the colleges based on slider window input\r\n    let filteredColleges = props.data.filter((college) => {\r\n        return college.availableNow === undefined || college.availableNow > 0;\r\n    })\r\n\r\n    // Get a list of college content\r\n    let mapAllColleges = filteredColleges.map((college) => {\r\n        return <College key={college.college} college={college} />;\r\n    });\r\n\r\n    // Return all the college content\r\n    return (<div>\r\n        {mapAllColleges}\r\n    </div>)\r\n}\r\n\r\n// Renders the content for a single college\r\nfunction College(props) {\r\n    let college = props.college;\r\n    let deptArr = college.departments;\r\n    return (<section className=\"college\">\r\n                <div><h1>{college.college}</h1></div>\r\n                <div className=\"row\">\r\n                    <AllTiles key={college.college} list={deptArr}/>  \r\n                </div>\r\n            </section>);\r\n}\r\n\r\n// Renders all the tiles which are information about all the \r\n// departments within the college\r\nfunction AllTiles(props) {\r\n    // Filter the colleges based on slider window input\r\n    let list = props.list.filter((dept) => {\r\n        return dept['show'] === undefined || dept.show;\r\n    });\r\n\r\n    // Get a list of tiles and delegate the tile rendering to another\r\n    // component\r\n    let mapAllTiles = list.map((deptInfo) => {\r\n        return <Tile key={deptInfo.name} deptInfo={deptInfo} />;\r\n    })\r\n\r\n    // Render the list\r\n    return (\r\n        <div>\r\n            {mapAllTiles}\r\n        </div>\r\n    )\r\n}\r\n\r\n// Render a single department tile\r\nfunction Tile(props) {\r\n    let deptInfo = props.deptInfo;\r\n    return (<div className=\"tile\">\r\n                <h2>{deptInfo.name}</h2>\r\n                <div className=\"other-side\">\r\n                    <button type=\"button\">Email</button>\r\n                    <button type=\"button\" className=\"favoritesButton\" id={deptInfo.name}><i className=\"far fa-star\" aria-label=\"Add to Favorites\" aria-hidden=\"true\"></i></button>\r\n                    <button type=\"button\"><i className=\"fas fa-calendar-alt\" aria-label=\"Schedule Appointment\" aria-hidden=\"true\"></i></button>\r\n                </div>\r\n            </div>);\r\n}\r\n\r\n// Render the dropdown button content which consists of the\r\n// slider window\r\nfunction FavDropDown(props) {\r\n    return(\r\n        <div className='container'>\r\n            <div className='standard-page'>\r\n                <div className=\"favAndDropdown\">\r\n                    <GetDropdown sliderCallBack={props.sliderCallBack}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Renders the content for dropdown and handles the change in\r\n// slider window through callback function passed as prop\r\nfunction GetDropdown(props) {\r\n    // States for the dropdown\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n    const toggle = () => setDropdownOpen(prevState => !prevState);\r\n\r\n    const [val, setVal] = useState(\"1\");\r\n\r\n    // Callback function for handling the change in input for\r\n    // slider window\r\n    const changeData = (event) => {\r\n        props.sliderCallBack(event.target.value);\r\n        setVal(event.target.value);\r\n    }\r\n    // Render the dropdown content\r\n    return (\r\n      <Dropdown direction=\"down\" isOpen={dropdownOpen} toggle={toggle}>\r\n        <DropdownToggle caret aria-expanded=\"false\">\r\n            <i className=\"fas fa-bars\"></i>\r\n        </DropdownToggle>\r\n        <DropdownMenu>\r\n            <form className=\"px-4 py-3\">\r\n                <FormGroup>\r\n                    <Label for=\"formControlRange\">Advisors Available</Label>\r\n                    {/* <Input type=\"range\" name=\"range\" id=\"formControlRange\" min=\"1\" max=\"20\" onInput={changeData}/> */}\r\n                    <RangeSlider for=\"formControlRange\" value={val} onChange={changeData} min=\"1\" max=\"20\" step=\"1\" tooltip=\"on\"/>\r\n                </FormGroup>\r\n            </form>\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n    );\r\n}\r\n\r\n// Export the main advising page function to main app\r\nexport default AdvisingPage;","C:\\Users\\Cateo\\Documents\\info340-code\\project-2-coei26\\src\\Auth.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":38,"nodeType":"42","messageId":"43","endLine":1,"endColumn":61},{"ruleId":"40","severity":1,"message":"44","line":2,"column":61,"nodeType":"42","messageId":"43","endLine":2,"endColumn":66},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'createSliderWithTooltip' is defined but never used.","Identifier","unusedVar","'Input' is defined but never used.","no-global-assign","no-unsafe-negation"]